
import pylab as pl  # imported for linsapce
import time # imported for sleep

import sys  # default setting for pyqt
from PyQt5 import QtWidgets, uic   # default setting for pyqt
import matplotlib.pyplot as plt # imported for graph
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas # imported for graph
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar # imported for graph
import pyvisa
import u3


class Form(QtWidgets.QMainWindow):   # dependng on desinger ui file, QMainWindow or QDialog ...
    def __init__(self):
        super().__init__()   
        uic.loadUi('AFG_and_U3_UI_matplot.ui', self)  # Load UI file

##### U3 initiallization #####
        self.d = None
        self.d = u3.U3()
        self.d.debug = True
        self.d.configIO(FIOAnalog=0x0F)


##### GUI button setting #####
        self.refreshButton.clicked.connect(self.connection_refresh)
        self.selectButton.clicked.connect(self.select_Clicked)

        self.setButton.clicked.connect(self.set_Clicked)
        self.measureButton.clicked.connect(self.measure_Clicked)

        self.runButton.clicked.connect(self.run_clicked)  
        
        self.closeButton.clicked.connect(self.close_Clicked)
 
##### list creation for graph data #####
        self.xdata=[]
        self.ydata=[]   
        
######## Graph setting ################################################ 
        self.fig = plt.Figure((5,5))
#        self.fig.tight_layout()
        self.canvas = FigureCanvas(self.fig)
        self.toolbar = NavigationToolbar(self.canvas, self)
        self.graph.addWidget(self.canvas)
        self.graph.addWidget(self.toolbar)   
        self.ax = self.fig.add_subplot(111)
        self.ax.plot(self.xdata, self.ydata, 'ro', label="graph" )
        self.ax.set_xlabel("x")
        self.ax.set_xlabel("y")
        self.ax.patch.set_facecolor('white')
        self.ax.set_title("my graph")
        self.ax.legend()
        self.canvas.draw()
        

##### Button_click conection #####
    def connection_refresh(self):
        self.rm = pyvisa.ResourceManager()
        self.comboBox.clear()
        self.comboBox.addItems(self.rm.list_resources())
        self.dev = self.rm.open_resource(self.comboBox.currentText())
  
    def select_Clicked(self):
        self.dev = self.rm.open_resource(self.comboBox.currentText())       
  
        
    def set_Clicked(self):
        print("clicked!!")
        number=self.lineEdit_set.text()
        self.set_offset(number)

    def measure_Clicked(self):
        print("clicked!!")
        mea=str(self.Analog_input())
        self.lineEdit_measure.setText(mea)
        
    def close_Clicked(self):
        print("clicked!!")
        self.dev.close()
        self.dev_2.close()

    def run_clicked(self): 
        start=float(self.lineEdit_start.text())    
        stop=float(self.lineEdit_stop.text())
        step=int(self.lineEdit_step.text())
##### To use the text as number, 
##### it is needed to convert the text to number type like float, int...

        Xvalues=pl.linspace(start, stop, step)

######## Graph setting again to refresh graph after run clicked ############### 
        self.ax.cla()
        self.xdata=[]
        self.ydata=[]
        self.ax.plot(self.xdata, self.ydata, 'ro', label="graph" )
        self.ax.set_xlabel("x")
        self.ax.set_xlabel("y")
        self.ax.patch.set_facecolor('white')
        self.ax.set_title("my graph")
        self.ax.legend()
        self.canvas.draw()
        QtWidgets.QApplication.processEvents()

###################### for ##############################
        for i, x in enumerate(Xvalues):   # Here, i is index, x is the value in the list, actually any symbol can be used for i and x
            
            self.xdata.append(x)   # to show graph in a prcess of obtaing data
            self.set_offset(str(x)) # To convert numver type to string type
            time.sleep(1) # wait 1 sec
            value=self.Analog_input() # measured data
            self.ydata.append(value)
            print(x, value)
            time.sleep(1)

            self.ax.plot(self.xdata, self.ydata, 'ro', label="graph" )
            self.canvas.draw()
            QtWidgets.QApplication.processEvents()   # this is for update graph in user interface! 
            

##### instrument method define #####
#AFG2021
    def output_on(self):
        self.dev.write('OUTPUT1:STATE ON')
    def output_off(self):
        self.dev.write('OUTPUT1:STATE OFF')
    def set_offset(self, volt):
        self.dev.write('SOURce1:VOLTage:LEVel:IMMediate:OFFSet {}V'.format(volt))
        self.output_on()
        
        
    def Analog_input(self):
        ainValue=self.d.getAIN(0)
        return ainValue
            

 #### common setting for pyqt##########
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    w = Form()
    w.show()
    sys.exit(app.exec_())